# -*- coding: utf-8 -*-
"""CNN_KERAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16zP0h9d_RWICvX8zIUcukPM-_xvsqB9u
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation,Dropout,Flatten,Dense
from keras import backend as K
from keras.optimizers import SGD
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing import image
import os
import cv2

def convert_to_one_hot(Y, C):
    Y = np.eye(C)[Y.reshape(-1)].T
    return Y

a = '/content/drive/My Drive/Colab Notebooks/SDP_Covid_Classifier/train/covid'
b = '/content/drive/My Drive/Colab Notebooks/SDP_Covid_Classifier/train/healthy'
c = '/content/drive/My Drive/Colab Notebooks/SDP_Covid_Classifier/train/viral'

path1 = os.listdir(a)
path2 = os.listdir(b)
path3 = os.listdir(c)

name1 = []
list1 = []  #accessing normal x-ray images location/path
for i in range(len(path1)):
    img = cv2.imread(os.path.join(a,path1[i]))
    res = cv2.resize(img,(256,256))
    name1.append(os.path.join(a,path1[i]))
    list1.append(res)

name2 = []
list2 = []   #accessing Viral Pneumonia x-ray images location/path
for i in range(len(path2)):
    img = cv2.imread(os.path.join(b,path2[i]))
    res = cv2.resize(img,(256,256))
    name2.append(os.path.join(b,path2[i]))
    list2.append(res)
    
name3 =[]
list3 = []    #accessing covid x-ray images location/path
for i in range(len(path3)):
    img = cv2.imread(os.path.join(c,path3[i]))
    res = cv2.resize(img,(256,256))
    name3.append(os.path.join(c,path3[i]))
    list3.append(res)


train_name = name1 + name2 + name3
train = list1 + list2 + list3

a1 = '/content/drive/My Drive/Colab Notebooks/SDP_Covid_Classifier/test/covid'
b1 = '/content/drive/My Drive/Colab Notebooks/SDP_Covid_Classifier/test/healthy'
c1 = '/content/drive/My Drive/Colab Notebooks/SDP_Covid_Classifier/test/viral'

path_test1 = os.listdir(a1)
path_test2 = os.listdir(b1)
path_test3 = os.listdir(c1)

name_test1 = []
list_test1 = []  #accessing normal x-ray images location/path
for i in range(len(path_test1)):
    img = cv2.imread(os.path.join(a1,path_test1[i]))
    res = cv2.resize(img,(256,256))
    name_test1.append(os.path.join(a1,path_test1[i]))
    list_test1.append(res)

name_test2 = []
list_test2 = []   #accessing Viral Pneumonia x-ray images location/path
for i in range(len(path_test2)):
    img = cv2.imread(os.path.join(b1,path_test2[i]))
    res = cv2.resize(img,(256,256))
    name_test2.append(os.path.join(b1,path_test2[i]))
    list_test2.append(res)
    
name_test3 =[]
list_test3 = []    #accessing covid x-ray images location/path
for i in range(len(path_test3)):
    img = cv2.imread(os.path.join(c1,path_test3[i]))
    res = cv2.resize(img,(256,256))
    name_test3.append(os.path.join(c1,path_test3[i]))
    list_test3.append(res)


train_name_test = name_test1 + name_test2 + name_test3
test = list_test1 + list_test2 + list_test3

label_train = []       #labeling the training dataset

for i in train_name:    
  if 'covid' in i:
    label_train.append(0)
  elif 'healthy' in i:
    label_train.append(1)
  elif 'viral' in i:
    label_train.append(2)

Y_train1 = np.array(label_train)

label_test = []       #labeling the testing dataset

for i in train_name_test:    
  if 'covid' in i:
    label_test.append(0)
  elif 'healthy' in i:
    label_test.append(1)
  elif 'viral' in i:
    label_test.append(2)
Y_test1 = np.array(label_test)

X_train_orig = np.array(train)                    #all images of train dataset
Y_train_orig = np.reshape(Y_train1,(1,2219))        #all labels of images
X_test_orig = np.array(test)                      #all images of test dataset
Y_test_orig = np.reshape(Y_test1,(1,672))           #all labels of test images

X_train = X_train_orig/255        #to convet the pixel values in range of 0-1   
X_test = X_test_orig/255
Y_train = convert_to_one_hot(Y_train_orig, 3).T  #to convert the lables into (1,3) matix
Y_test = convert_to_one_hot(Y_test_orig, 3).T
print ("number of training examples = " + str(X_train.shape[0]))
print ("number of test examples = " + str(X_test.shape[0]))
print ("X_train shape: " + str(X_train.shape))
print ("Y_train shape: " + str(Y_train.shape))
print ("X_test shape: " + str(X_test.shape))
print ("Y_test shape: " + str(Y_test.shape))
img_width, img_height = 256, 256

#CNN model using Keras

model = Sequential()

model.add(Conv2D(32,(3,3),activation='relu',input_shape = (img_width, img_height,3)))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(96,(3,3),activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(3, activation='softmax'))
model.compile(loss='categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])

model.summary()

hist = model.fit(X_train,Y_train,batch_size= 64, epochs=15, validation_split=0.20)

model.evaluate(X_test,Y_test) #checking accuracy of model on test set

model.save('covid_classifier_final_model.h5')

# plt.plot(hist.history['accuracy'])
# # plt.plot(hist.history['val_accuracy'])
# plt.title('Model accuracy')
# plt.ylabel('Accuracy')
# plt.xlabel('Epoch')
# plt.legend(['train','val'],loc = 'upper right')
# plt.show()
plt.plot(hist.history['loss'],'r',label='training loss')
plt.plot(hist.history['val_loss'],label='validation loss')
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train','val'],loc = 'upper right')
plt.show()

plt.plot(hist.history['loss'])
# plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('loss')
plt.xlabel('Epoch')
plt.legend(['train','val'],loc = 'upper right')
plt.show()

img_pred = image.load_img('/content/drive/My Drive/Colab Notebooks/Dataset/test/Healthy/healthy_190.png',target_size=(256,256))
img_pred = image.img_to_array(img_pred)
img_pred = np.expand_dims(img_pred, axis = 0)

rslt = model.predict(img_pred)
print(rslt)

